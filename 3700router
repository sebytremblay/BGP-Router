#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math
from pprint import pprint
from functools import cmp_to_key
import copy

class Router:
    # Stores relevant router information
    relations = {}
    sockets = {}
    ports = {}
    updates = []
    forwarding_table = {}

    def __init__(self, asn, connections):
        """Initializes the router with its ASN and connections to other routers.

        Args:
            asn (int): The AS number of the router.
            connections (list): A list of strings, each of which represents a connection to another router. 
            Each string is in the format "port-neighbor-relation", where "port" is the port number on which 
            the router should listen for messages from "neighbor", and "relation" is the relationship between 
            the routers (either "peer" or "provider").
        """
        print("Router at AS %s starting up" % asn)
        self.asn = asn
        for relationship in connections:
            port, neighbor, relation = relationship.split("-")

            self.sockets[neighbor] = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sockets[neighbor].bind(('localhost', 0))
            self.ports[neighbor] = int(port)
            self.relations[neighbor] = relation
            
            print(f"Connected to {neighbor} on port {port} with relation {relation}")
            self.send(neighbor, json.dumps({ "type": "handshake", "src": self.our_addr(neighbor), "dst": neighbor, "msg": {}  }))

    def our_addr(self, dst):
            """Returns the IP address of the router on the interface leading to the specified destination.

            Args:
                dst (str): The name of the destination router.

            Returns:
                str: The IP address of the router on the interface leading to the specified destination.
            """
            quads = list(int(qdn) for qdn in dst.split('.'))
            quads[3] = 1
            return "%d.%d.%d.%d" % (quads[0], quads[1], quads[2], quads[3])

    def send(self, network, message):
            """
            Sends a message to the specified network.

            Parameters:
            network (str): The network to send the message to.
            message (str): The message to be sent.

            Returns:
            None
            """
            # Check if the network is in the sockets and ports
            if network not in self.sockets or network not in self.ports:
                return
            
            # Sends a message to the specified network
            self.sockets[network].sendto(message.encode('utf-8'), ('localhost', self.ports[network]))
    
    def run(self):
        """Runs the router's main loop."""
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                k, addr = conn.recvfrom(65535)
                srcif = None
                for sock in self.sockets:
                    if self.sockets[sock] == conn:
                        srcif = sock
                        break
                msg = k.decode('utf-8')
                
                # Handle the incoming message
                self.handle_incoming_message(srcif, msg)
                    
    def handle_incoming_message(self, srcif, message):
        """Process incoming messages from neighbors.
        
        Args:
            srcif (str): The name of the interface on which the message was received.
            message (str): The message that was received."""
        # Attempt to parse the message as JSON
        try:
            json_message = json.loads(message)
        except Exception as e:
            print(f"Error parsing JSON message: {e}")
            return
        
        # Ensure the message contains a 'type' field
        if 'type' not in json_message:
            print("Error: Received message does not contain a 'type' field.")
            return

        # Determine the type of message and process it accordingly
        message_type = json_message['type']
        if message_type == 'update':
            self.process_route_update(srcif, json_message)
        elif message_type == 'withdraw':
            self.process_route_withdrawal(json_message)
        elif message_type == 'data':
            self.process_data(json_message)
        elif message_type == 'dump':
            self.process_dump(json_message['src'], json_message['msg'])
        else:
            print(f"Unknown message type received: {message_type}")

    def process_route_update(self, srcif, message):
        """Update the forwarding table based on a received route update.

        Args:
            srcif (str): The interface on which the update was received.
            message (dict): The route update message.
        """
        # Do nothing is msg body does not have expect fields
        expected_fields = ['network', 'netmask', 'localpref', 'ASPath', 'origin', 'selfOrigin']
        for expected_field in expected_fields:
            if expected_field not in message['msg']:
                return
        
        # Extract the relevant fields from the message
        network = message['msg']['network']
        netmask = message['msg']['netmask']
        localpref = message['msg']['localpref']
        ASPath = message['msg']['ASPath']
        origin = message['msg']['origin']
        selfOrigin = message['msg']['selfOrigin']
            
        # Prepare the new route for the forwarding table
        new_packet = {'origin': origin,
                      'localpref': localpref,
                      'network': network,
                      'ASPath': ASPath,
                      'netmask': netmask,
                      'peer': srcif,
                      'selfOrigin': selfOrigin,
                      'next_hop': srcif}
        route_key = (network, netmask)
        
        # Add the new packet to the list of packets for the route_key
        if route_key in self.forwarding_table:
            self.forwarding_table[route_key].append(new_packet)
        else:
            self.forwarding_table[route_key] = [new_packet] 
            

        # Find similar relations if they already exists
        for relation in self.relations:
            if self.ip_in_network(relation, network, netmask):
                self.relations[network] = self.relations[relation]
                break
                
        # Otherwise create new entry
        if network not in self.relations:
            self.relations[network] = self.relations[srcif]
            
        # Propagate the update to neighbors based on BGP policies
        self.propagate_update(srcif, message)
        
        # Aggregate routes if necessary
        self.aggregate_routes()
        
        # Cache the update
        self.updates.append(message)
    
    def propagate_update(self, srcif, message):
        """Propagates a route update to neighbors based on BGP policies.
        
        Args:
            srcif (str): The interface on which the update was received.
            message (dict): The route update message.
        """
        # Prepare the message to be sent to neighbors, excluding private fields
        propagated_message = {
            'msg': {
                'netmask': message['msg']['netmask'],
                'ASPath': [self.asn] + message['msg']['ASPath'],
                'network': message['msg']['network']
            },
            'type': 'update',
        }

        # Determine which neighbors to send the update to
        for neighbor, relation in self.relations.items():
            if neighbor != srcif:  # Do not send the update back to the source
                # Update neighbor specific messaging
                propagated_message['src'] = self.our_addr(neighbor)
                propagated_message['dst'] = neighbor
                
                # Send the update to the neighbor if needed
                if self.is_transaction_profitable(relation, self.relations[srcif]):
                    self.send(neighbor, json.dumps(propagated_message))
                else:
                    print(f"Transaction not profitable: {relation} -> {self.relations[srcif]}")
                    
    def process_route_withdrawal(self, packet):
        """Remove a route from the forwarding table.
        
        Args:
            src: The source of the withdrawal.
            dst: The destination network of the route being withdrawn.
        """
        # Inform our neighbors of the withdrawal
        self.propagate_withdrawl(packet['src'], packet['msg'])
        
        for revocation in packet['msg']:
            # If revocation is improperly formatted, ignore
            expected_fields = ['network', 'netmask']
            for expected_field in expected_fields:
                if expected_field not in revocation:
                    continue
            
            # Extract relevant fields
            network = revocation['network']
            netmask = revocation['netmask']

            # Delete all entries in forward table with these attributes
            delete_candidates = self.forwarding_table.get((network, netmask), [])
            routes_to_delete = []
        
            for candidate in delete_candidates:
                if candidate['peer'] == packet['src']:
                    routes_to_delete.append(candidate)
            
            # Remove the routes from the forwarding table
            self.forwarding_table[(network, netmask)] = [route for route in delete_candidates if route not in routes_to_delete]
            
            # Remove any cached updates to this route
            self.remove_corresponding_updates(network, netmask, packet['src'])
                        
        # Rebuild the table
        # self.rebuild_table()
       
    def remove_corresponding_updates(self, network, netmask, src):
        """Removes all updates from the cache that correspond to a given route.

        Args:
            network (str): The network of the route.
            netmask (str): The netmask of the route.
        """
        # Track routes to remove
        updates_to_remove = []

        # Finds all updates from the cache that correspond to a given route
        for update in self.updates:
            if update['msg']['network'] == network and update['msg']['netmask'] == netmask and update['src'] == src:
                updates_to_remove.append(update)
                
        # Delete found updates
        self.updates = [update for update in self.updates if update not in updates_to_remove]
            
    def propagate_withdrawl(self, srcif, revocation_list):
        """Propogates withdrawl message to all expected neighbors.

        Args:
            srcif (str): The socket interface the withdrawl message was received on.
            revocation_list (list): The networks to remove.
        """
        # Prepare the message to be sent to neighbors, excluding private fields
        propagated_message = {
            'type': 'withdraw',
            'msg': revocation_list
        }

        # Determine which neighbors to send the update to
        for neighbor, relation in self.relations.items():
            if neighbor != srcif:  # Do not send the update back to the source
                # Update neighbor specific messaging
                propagated_message['src'] = self.our_addr(neighbor)
                propagated_message['dst'] = neighbor
                
                # Send the update to the neighbor if needed
                if self.is_transaction_profitable(relation, self.relations[srcif]):
                    self.send(neighbor, json.dumps(propagated_message))
                else:
                    print(f"Transaction not profitable: {self.our_addr(neighbor)}:{relation} -> {self.relations[srcif]}")
    
    def rebuild_table(self):
        """Deletes and rebuilds our forwarding table."""
        # Empty the table
        self.forwarding_table = {}
        
        # Reset the updates and store original copy
        prev_updates = self.updates.copy()
        self.updates = []

        # Reinstate all of the updates
        for update in prev_updates:
            srcif = update['src']
            self.handle_incoming_message(srcif, json.dumps(update))
    
    def process_data(self, message):
        """Process a data packet received from a neighbor.

        Args:
            message (dict): The message received from the neighbor.
        """
        # Extracts message information
        src = message['src']
        dst = message['dst']
        payload = message['msg']
        
        # Attempt to find a route for the destination
        routes_found = []
        for network, netmask in self.forwarding_table.keys():
            if self.ip_in_network(dst, network, netmask):
                for route in self.forwarding_table[(network, netmask)]:
                    self.relations[dst] = self.relations[network]
                    routes_found.append(route)
        
        # If no route is found, send a "no route" message back to the source
        if len(routes_found) == 0:
            self.send_no_route_message(src, dst)
        
        # If one or more routes is found, forward the packet to the next hop on the best route
        if len(routes_found) >= 1:
            best_route =  self.find_best_route(routes_found)
            next_hop = best_route['next_hop']
            dst_relationship = self.relations[next_hop]
            src_relationship = self.relations.get(src, '')
            
            # If transaction is profitable, send message to next hop
            if self.is_transaction_profitable(dst_relationship, src_relationship):
                self.send(next_hop,
                          json.dumps({'type': 'data', 
                                    'src': src, 
                                    'dst': dst, 
                                    'payload': payload}))
            else: # Otherwise inform source that the transaction was not profitable
                print(f"Did not send data to {next_hop} because it is not a profitable transaction.")
                self.send_no_route_message(src, dst)
            
    def is_transaction_profitable(self, dst_relation, src_relation):
        """Evaluates the protocol rules to determine if a message should be sent to a neighbor,
        assuming that an entry was found in the forwarding table.
        
        Args:
            dst_relation (str): The relationship of the destination neighbor.
            src_relation (str): The relationship of the source neighbor.
            
        Returns:
            bool: True if the transaction is profitable, False otherwise.
        """
        # If we received from a customer, send to all
        if src_relation == 'cust' or dst_relation == 'cust':
            return True
        
        # If we received from a peer or provider, only send to customers
        if (src_relation in ['peer', 'provider'] and dst_relation == 'cust'):
            return True
        
        # Otherwise return false
        return False
    
    def ip_in_network(self, ip, network, netmask):
        """Check if an IP address is within a given network.

        Args:
            ip (str): The IP address to check.
            network (str): The network address.
            netmask (str): The network mask.

        Returns:
            bool: True if ip is within the network defined by network and netmask, False otherwise.
        """
        # Convert IP, network, and netmask to integers for comparison
        ip_int = self.ip_to_int(ip)
        network_int = self.ip_to_int(network)
        netmask_int = self.ip_to_int(netmask)
        
        return ip_int & netmask_int == network_int & netmask_int

    def send_no_route_message(self, src, dst):
        """Send a 'no route' message back to the source.

        Args:
            src (str): The source router IP or identifier from which the original message came.
            dst (str): The original destination IP that could not be routed.
        """
        # Construct the no route message
        no_route_message = json.dumps({
            'type': 'no route',
            'src': self.our_addr(src),
            'dst': dst,
            'msg': f"No route to {dst}"
        })
        
        # Send the message back to the source
        self.send(self.our_addr(src), no_route_message)
        
    def compare_routes(self, route1, route2):
        """Compare two routes based on specified criteria.
        
        Args:
            route1 (dict): The first route to compare.
            route2 (dict): The second route to compare.
        
        Returns:
            int: -1 if route1 is preferred, 
                1 if route2 is preferred, or 
                0 if they are equal.
        """
        # Choose the longest prefix match
        if self.netmask_to_prefix_length(route1['netmask']) != self.netmask_to_prefix_length(route2['netmask']):
            return -1 if self.netmask_to_prefix_length(route1['netmask']) \
                > self.netmask_to_prefix_length(route2['netmask']) else 1
        
        # Compare by localpref
        if route1['localpref'] != route2['localpref']:
            return -1 if route1['localpref'] > route2['localpref'] else 1
        
        # Compare by selfOrigin
        if route1['selfOrigin'] != route2['selfOrigin']:
            return -1 if route1['selfOrigin'] else 1
        
        # Compare by ASPath length
        if len(route1['ASPath']) != len(route2['ASPath']):
            return -1 if len(route1['ASPath']) < len(route2['ASPath']) else 1
        
        # Compare by origin
        origin_order = {'IGP': 0, 'EGP': 1, 'UNK': 2}
        if origin_order[route1['origin']] != origin_order[route2['origin']]:
            return -1 if origin_order[route1['origin']] < origin_order[route2['origin']] else 1
        
        # Compare by neighbor IP
        route1_ip = int.from_bytes(socket.inet_aton(route1['next_hop']), 'big')
        route2_ip = int.from_bytes(socket.inet_aton(route2['next_hop']), 'big')
        return -1 if route1_ip < route2_ip else 1 if route1_ip > route2_ip else 0
    
    def netmask_to_prefix_length(self, netmask):
        """
        Convert a netmask to its corresponding prefix length.

        Args:
            netmask (str): The netmask in dotted decimal notation (e.g., "255.255.255.0").

        Returns:
            int: The prefix length (number of leading 1 bits in the netmask).
        """
        # Convert the netmask to an integer
        netmask_int = self.ip_to_int(netmask)
        
        # Count the number of leading 1 bits
        prefix_length = 0
        while netmask_int & (1 << (31 - prefix_length)):
            prefix_length += 1
        
        return prefix_length
        
    def find_best_route(self, routes):
        """Find the best route based on the comparison function."""
        # Sort routes based on the comparison function
        sorted_routes = sorted(routes, key=cmp_to_key(self.compare_routes))
        
        # Return the best route
        return sorted_routes[0]
    
    def process_dump(self, src, table):
        """Process a dump of the neighbor's forwarding table.

        Args:
            src (str): The source of the dump.
            table (dict): The forwarding table of the neighbor."""
        # Aggregate the routes in the forwarding table
        self.aggregate_routes()
        
        # Convert the forwarding table to a list of routes
        table = []
        for route_list in self.forwarding_table.values():
            for route in route_list:
                table.append(route.copy())
        
        # Convert the network and netmask to strings for serialization
        for route in table:
            route['peer'] = route.pop('next_hop')
            
        # Create a new "table" message with the aggregated routes
        table_message = {
            'src': self.our_addr(src),
            'dst': src,
            'type': 'table',
            'msg': table
        }
        self.send(src, json.dumps(table_message))

    def ip_to_int(self, ip):
        """Converts an IP address from string format to an integer.
        
        Args:
            ip (str): The IP address to convert.
            
        Returns:
            int: The integer representation of the IP address."""
        return sum(int(byte) << (8 * idx) for idx, byte in enumerate(reversed(ip.split('.'))))

    def int_to_ip(self, integer):
        """Converts an integer back to an IP address string.
        
        Args:
            integer (int): The integer to convert.
            
        Returns:
            str: The string representation of the IP address."""
        return '.'.join(str((integer >> (8 * i)) & 0xFF) for i in reversed(range(4)))
    
    def aggregate_routes(self):
        """Aggregate routes in the forwarding table."""
        # Step 1: Prepare a list of all routes, sorted by network address
        all_routes = []
        for routes in self.forwarding_table.values():
            all_routes.extend(routes)
        all_routes.sort(key=lambda x: self.ip_to_int(x['network']))

        # Step 2-5: Try to aggregate routes
        aggregated = True
        while aggregated:
            aggregated = False
            i = 0
            while i < len(all_routes) - 1:
                route1 = all_routes[i]
                route2 = all_routes[i + 1]

                if self.can_aggregate(route1, route2):
                    # Routes can be aggregated
                    new_network, new_netmask = self.aggregate(route1, route2)
                    new_route = copy.deepcopy(route1)  # Copy attributes from one of the routes
                    new_route['network'] = new_network
                    new_route['netmask'] = new_netmask
                    
                    # Replace the two routes with the new, aggregated route
                    all_routes.pop(i)
                    all_routes.pop(i)
                    all_routes.insert(i, new_route)
                    aggregated = True
                else:
                    i += 1

        # Step 6: Update the forwarding table with aggregated routes
        self.forwarding_table = {}
        for route in all_routes:
            key = (route['network'], route['netmask'])
            if key in self.forwarding_table:
                self.forwarding_table[key].append(route)
            else:
                self.forwarding_table[key] = [route]
                
    def can_aggregate(self, route1, route2):
        """Check if two routes can be aggregated.

        Args:
            route1 (dict): The first route.
            route2 (dict): The second route.

        Returns:
            bool: True if the routes can be aggregated, False otherwise."""
        # Check if two routes are adjacent and have identical attributes (simplified version)
        if not self.have_same_attributes(route1, route2):
            return False

        # Extract network and netmask from the routes
        network1 = self.ip_to_int(route1['network'])
        netmask1 = self.ip_to_int(route1['netmask'])
        network2 = self.ip_to_int(route2['network'])
        netmask2 = self.ip_to_int(route2['netmask'])

        # Ensure netmasks are the same and check adjacency
        if netmask1 != netmask2 or not self.are_adjacent(network1, netmask1, network2, netmask2):
            return False

        return True

    def are_adjacent(self, network1, netmask1, network2, netmask2):
        """
        Determine if two routes are numerically adjacent.
        
        Args:
            network1 (int): The network address of the first route.
            netmask1 (int): The netmask of the first route.
            network2 (int): The network address of the second route.
            netmask2 (int): The netmask of the second route.
            
        Returns:
            bool: True if route1 and route2 are adjacent, False otherwise.
        """
        # Calculate the broadcast address of the first network
        broadcast1 = network1 | (~netmask1 & 0xFFFFFFFF)

        # The second network is adjacent if its network address is one more than the broadcast address of the first
        return network2 == broadcast1 + 1

    def have_same_attributes(self, route1, route2):
        """Check if two routes have the same attributes.
        
        Args:
            route1 (dict): The first route to compare.
            route2 (dict): The second route to compare.
            
        Returns:
            bool: Whether the routes have the same attributes."""
        return route1['localpref'] == route2['localpref'] \
            and route1['origin'] == route2['origin'] \
            and route1['ASPath'] == route2['ASPath'] \
            and route1['selfOrigin'] == route2['selfOrigin'] \

    def aggregate(self, route1, route2):
        """
        Aggregate two adjacent routes into one. Assumes that the routes are adjacent
        and have the same netmask, next-hop, and other relevant attributes.

        Args:
            route1 (dict): The first route to aggregate.
            route2 (dict): The second route to aggregate.

        Returns:
            string: The new network address.
            string: The new network mask.
        """
        # Convert netmask to integer for comparison and calculation
        netmask_int = self.ip_to_int(route1['netmask'])
        
        # Calculate the new netmask by subtracting one from the binary representation's length
        new_netmask_int = (netmask_int << 1) & 0xFFFFFFFF
        new_netmask = self.int_to_ip(new_netmask_int)
        
        # The new network is the lower of the two original networks under the new netmask
        new_network_int = self.ip_to_int(route1['network']) & new_netmask_int
        new_network = self.int_to_ip(new_network_int)

        return new_network, new_netmask

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='route packets')
    parser.add_argument('asn', type=int, help="AS number of this router")
    parser.add_argument('connections', metavar='connections', type=str, nargs='+', help="connections")
    args = parser.parse_args()
    router = Router(args.asn, args.connections)
    router.run()